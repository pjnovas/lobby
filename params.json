{"name":"Lobby","tagline":"Room factory of Users for NodeJS with optional built-in Express routes and SocketIO events","body":"**Lobby** was created to manage rooms of players for games, like a *lobby* where players met before start a match between them but it can be used for every grouping of users you need.\r\n\r\nIt's divided in 3 modules:  \r\n\r\n1. A manager for rooms and users  \r\n2. A plugin to enable Express Routes  \r\n3. A plugin to enable SocketIO events  \r\n\r\n## Requeriments\r\nRequired: NodeJS 0.8+  \r\nOptional: Express Server  \r\nOptional: SocketIO Server  \r\n\r\n## Getting started\r\n```\r\nnpm install lobby --save-dev\r\n```\r\n\r\n## Room Manager\r\n\r\n```javascript\r\nvar Lobby = require('lobby');\r\nvar myLobby = new Lobby();\r\n```\r\n\r\n### Methods\r\n`create(room_config)`: create a room and return it.  \r\n`queue(user_id, room_config)`: find or create a room queue with the config, joins the user and return it.  \r\n`getById(room_id)`: find and return a room by id.  \r\n`destroy(room)`: if a room is send will remove it, otherwise will destroy the manager.  \r\n`router(express_app)`: initialize the plugin appending room routes to the express app.  \r\n`events(socket_io_app)`: initialize the real time plugin appending a `/rooms` namespace with events.  \r\n`error`: expose all Lobby Errors that could happen.\r\n\r\n### Events\r\n`room:create`: a room has been created  \r\n`room:destroy`: a room has been destroyed\r\n\r\n## Room\r\n\r\n### Create Rooms\r\nLobby is going to take care of managing rooms and users for you, so you will ask for a room first: \r\n\r\n```javascript\r\nvar newRoom = myLobby.create({\r\n  //room options\r\n  seats: 5\r\n});\r\nconsole.log(newRoom.id); //something like \"hhdpzwll\"\r\n```\r\nEvery room is going to have an unique id which is generated by the manager.\r\n\r\n### Room Options\r\n`seats` _**Number**_ amount of users allowed to join (default: `2`)  \r\n`owner` _**Number String**_ a user id to set as the owner (default: `'system'`)  \r\n`autoDestroy` _**Boolean**_ self-destroy when it's empty of users (default: `true`)  \r\n`startOnFull` _**Boolean**_ fires start event when it's full of users (default: `false`)  \r\n`startOnReady` _**Boolean**_ fires start event when it's full and all users are connected (ready). Used with the plugin of WebSockets (default: `false`)  \r\n**Also any property:value you want to store, it will be untouched.**\r\n\r\n### Room Methods\r\n`join (user_or_user_id)`: join a user to the room  \r\n`leave (user_or_user_id)`: removes a user from the room  \r\n`update (json_properties)`: update your own room properties  \r\n`start (user_or_user_id)`: start the room, if an owner was specify it must be sent by parameter  \r\n`has (user_or_user_id)`: returns true or false if the user is in the room  \r\n`isFull ()`: returns true if the room has the same users joined as seats configured  \r\n`isEmpty ()`: returns true if the room has no users in it  \r\n`freeSeats ()`: returns Number of how many seats are left  \r\n`clear ()`: removes all users  \r\n`toJSON ()`: returns a JSON representation of the room    \r\n`destroy ()`: destroy the room  \r\n\r\n### Room Events\r\nYou can listen to events of a room to know what is happening and when:\r\n\r\n```javascript\r\nvar room = myLobby.create({\r\n  seats: 2\r\n});\r\n\r\nroom.on(\"user:join\", function(user){\r\n  console.log(\"User with %s has joined room %s\", user.id, this.id);\r\n});\r\n\r\nroom.on(\"room:full\", function(){\r\n  console.log(\"Room %s is now full!\", this.id);\r\n});\r\n\r\nroom.join('userId-1');\r\nroom.join('userId-2');\r\n```\r\n#### Events\r\n`user:join`: a user joined  \r\n`user:leave`: a user left  \r\n`room:full`: the room is full  \r\n`room:empty`: the room is empty    \r\n`room:start`: the room started  \r\n`room:clear`: the room was cleared  \r\n`room:destroy`: room destroyed  \r\n\r\n### Room Queues\r\nOptionally you can get room queue, so you can have your rooms configurations and leave the Manager to retrieve a found one or create a new one.\r\n\r\n```javascript\r\n// creates a new room\r\nvar room2Seats = myLobby.queue('userId-1', {\r\n  seats: 2\r\n});\r\n\r\nconsole.log(room2Seats.owner); // 'queue'\r\nconsole.log(room2Seats.has('userId-1')); // true\r\n\r\n// creates a new room\r\nvar room2SeatsAndAwesome = myLobby.queue('userId-2', {\r\n  seats: 2,\r\n  awesome: true\r\n});\r\n\r\n// retrieves the first room\r\nvar same_as_room2Seats = myLobby.queue('userId-3', {\r\n  seats: 2\r\n});\r\n\r\n// retrieves the second room\r\nvar same_as_room2SeatsAndAwesome = myLobby.queue('userId-4', {\r\n  seats: 2,\r\n  awesome: true\r\n});\r\n```\r\n\r\n## Router (Express)\r\nAdd routes to an express application.\r\n\r\n```javascript\r\nvar Lobby = require('lobby')\r\n  , express = require('express')\r\n  , http = require('http');\r\n\r\nvar myLobby = new Lobby();\r\n\r\nvar app = express();\r\napp.use(express.bodyParser());\r\napp.use(express.methodOverride());\r\napp.use(app.router);\r\n\r\nhttp.createServer(app).listen(3000);\r\n\r\nmyLobby.router(app);\r\n```\r\n\r\n### Routes\r\n\r\n`GET``/rooms` Retrieve all current created rooms.  \r\n`POST``/rooms` Create a room and retrieves a JSON representation of it.  \r\n`POST``/rooms/queues` Finds or Create a room queue and retrieves a JSON representation of it.  \r\n\r\n`GET``/rooms/:roomId` Retrieves a room by its id.  \r\n`PUT``/rooms/:roomId` Updates a rooms properties (same as room.update()).  \r\n`DELETE``/rooms/:roomId` Destroy a room.  \r\n\r\n`POST``/rooms/:roomId/users` Join a user to a room.  \r\n`DELETE``/rooms/:roomId/users/:userId` Remove (leave) a user from a room.  \r\n\r\n## Events (SocketIO)\r\nA socketio namespace named `/rooms` will be created for lobby events.\r\n\r\n```javascript\r\nvar Lobby = require('lobby')\r\n  , express = require('express')\r\n  , socketIO = require('socket.io')\r\n  , http = require('http');\r\n\r\nvar myLobby = new Lobby();\r\n\r\nvar server = http.createServer(app);\r\nvar io = socketIO.listen(server);\r\nserver.listen(3000);\r\n\r\nmyLobby.events(io);\r\n```\r\n\r\n### Client Events to listen:\r\n`room:user:join` a user joined the room  \r\n`room:user:leave` a user left the room  \r\n`room:user:connect` a user connected to the room  \r\n`room:user:disconnect` a user disconnected from the room  \r\n\r\n`room:full` the room is now full  \r\n`room:ready` the room is ready, every user joined is now connected  \r\n`room:start` the room has started  \r\n`room:destroy` the room has been canceled  \r\n\r\n### Client Events to emit:\r\n`room:user:connect` emit once the user has joined the room to connect to it.  \r\n`room:user:disconnect` emit when the user disconnect from the room.  \r\n\r\n### Client Example\r\n```javascript\r\nvar socket = io.connect('http://localhost:3000/rooms');\r\nsocket.on('connect', function () {\r\n  socket.emit('room:user:connect', {\r\n    roomId: 'xxxx',\r\n    userId: 'yyyy'\r\n  }, function(err, users){\r\n    if (err) {\r\n      return throw new Error('something went wrong! ' + err.message);\r\n    }\r\n\r\n    console.dir(users);\r\n\r\n    socket.on('room:ready', function(){\r\n      console.log('Room ready!, lets start!');\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n## Errors\r\nThis are the error Lobby will throw as known ones\r\n\r\n`UserNotFound` `404`   \r\n`RoomNotFound` `404`  \r\n`UserAlreadyInRoom` `409`  \r\n`InvalidUserOrId` `400`  \r\n`InvalidRoomOrId` `400`  \r\n`RoomFull` `409`  \r\n`NotOwner` `403`  \r\n  \r\nAnd can be found in `Lobby.error` namespace.  \r\n\r\n### Example\r\n\r\n```javascript\r\nvar Lobby = require('lobby');\r\nvar aLobby = new Lobby();\r\n\r\nvar newRoom = aLobby.create();\r\nnewRoom.join('uid1');\r\n\r\ntry {\r\n  newRoom.join('uid1');  //again\r\n}\r\ncatch (e) {\r\n  if (e instanceof Lobby.error.UserAlreadyInRoom){\r\n    // manage the problem\r\n  }\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}